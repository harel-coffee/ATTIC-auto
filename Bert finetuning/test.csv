label,summarydescription
1,"IndexWriter can flush too early when flushing by RAM usage. There is a silly bug in how DocumentsWriter tracks its RAM usage:
whenever term vectors are enabled, it incorrectly counts the space
used by term vectors towards flushing, when in fact this space is
recycled per document.

This is not a functionality bug.  All it causes is flushes to happen
too frequently, and, IndexWriter will use less RAM than you asked it
to.  To work around it you can simply give it a bigger RAM buffer.

I will commit a fix shortly."
1,"Indexing configuration ignored when indexing length. The NodeIndexer does not respect the indexing configuration when it adds a field for the property length. NodeIndexer.addValue(Document doc, InternalValue value, Name name) should check it the property actually needs to be indexed."
1,"Mixin removal exception. When trying to remove a mixin from a non nt:unstructured node (in my case nt:resource), you get the following exception:

Unable to alter mixin types: javax.jcr.nodetype.ConstraintViolationException: no matching property definition found for {http://www.day.com/jcr/cq/1.0}lastRolledout

lastRolledout property is defined by the mixin cq:LiveRelationship that I am trying to remove."
1,"problem in jcr-server/project.properties dependencies?. There seems to be a mismatch in the version numbers in the dependencies defined in jcr-server/project.properties. It refers to version 1.0, yet the other components are already at 1.1.

The attached patch solves the problem for me, but I don't claim to fully understand how this works...
"
1,FastVectorHighlighter: highlighted term is out of alignment in multi-valued NOT_ANALYZED field. 
1,"literal plus (+) character in path components of HttpURL is not preserved.. When a literal plus character is included in the path component of an URL, it is
not encoded, but get decoded during getPath() to a space.

Reproducible with the following:

HttpURL httpURL = new HttpURL(""http://localhost/test+test"");
System.out.println(httpURL.getPath());

Output:
""test test""

The following path fixes the issue (This patch does not appear to break anything
 else):

Patch against SVN Repo:
URL: http://svn.apache.org/repos/asf/jakarta/commons/proper/httpclient/trunk
Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68
Revision: 405803

Index: src/java/org/apache/commons/httpclient/URI.java
===================================================================
--- src/java/org/apache/commons/httpclient/URI.java (revision 405803)
+++ src/java/org/apache/commons/httpclient/URI.java (working copy)
@@ -1552,6 +1552,7 @@
         allowed_abs_path.or(abs_path);
         // allowed_abs_path.set('/');  // aleady included
         allowed_abs_path.andNot(percent);
+        allowed_abs_path.clear('+');
     }


@@ -1563,6 +1564,7 @@
     static {
         allowed_rel_path.or(rel_path);
         allowed_rel_path.clear('%');
+        allowed_rel_path.clear('+');
     }"
1,"Nullpointer when creating URI from scheme specific part with null fragment. in org.apache.commons.httpclient.URI class constructor:

public URI(String scheme, String schemeSpecificPart, String fragment)
        throws URIException {
....
_fragment = fragment.toCharArray(); 

should be 

_fragment = fragment==null ? null : fragment.toCharArray();"
1,"LockTest.testLogout fails to refresh session before checking lock from other session. LockTest.testLogout() fails to refresh the session before checking the lock state of a node that was locked by another session.

Proposal:

Insert 

  n1.refresh(false);

before 

  assertTrue(""node must be locked"", n1.isLocked());

"
1,"unsynchronized access on 'itemCache' map in ItemManager . the access 'itemCache' map in ItemManager is mostly synchronized by not via the ItemStateListener methods:
[...]
    public void stateCreated(ItemState created) {
        ItemImpl item = retrieveItem(created.getId());
        if (item != null) {
            item.stateCreated(created);
        }
    }
[...]
    private ItemImpl retrieveItem(ItemId id) {
        return (ItemImpl) itemCache.get(id);
    }
[...]

this can result in a corruption of a map (eg subsequent accesses may result in a endless loop)."
1,"Node.getWeakReferences throws UnsupportedOperationException if not referenceable. .... while Node.getReferences() doesn't and returns an empty propertyiterator.

From my point of view both methods should behave the same way and i prefer not throwing.

"
1,"Bundle of events may be dropped due to NP.. In [1], if the resolver fails to lookup a node entry, a NP is thrown. This exception will break the loop which forwards the events to the observer in [2].
This will result in an observer not receiving events that he should have.

[1] org.apache.jackrabbit.jcr2spi.hierarchy.HierarchyManagerImpl#lookup(ItemId workspaceItemId)
[2] org.apache.jackrabbit.jcr2spi.WorkspaceManager#onEventReceived(EventBundle[] eventBundles,InternalEventListener[] lstnrs)"
1,"DatabaseJournal: java.lang.IllegalStateException: already in batch mode. Using the database journal (any database) fails with the following stack trace:

java.lang.IllegalStateException: already in batch mode
	at org.apache.jackrabbit.core.util.db.ConnectionHelper.startBatch(ConnectionHelper.java:212)
	at org.apache.jackrabbit.core.journal.DatabaseJournal.doSync(DatabaseJournal.java:449)
	at org.apache.jackrabbit.core.journal.AbstractJournal.lockAndSync(AbstractJournal.java:254)
	at org.apache.jackrabbit.core.journal.DefaultRecordProducer.append(DefaultRecordProducer.java:51)
	at org.apache.jackrabbit.core.cluster.ClusterNode$WorkspaceUpdateChannel.updateCreated(ClusterNode.java:539)
	at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.begin(SharedItemStateManager.java:559)
	at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate(SharedItemStateManager.java:1457)
	at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1487)
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:351)
	at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)"
1,"NPE when calling isCurrent() on a ParallellReader. As demonstrated by the test case below, if you call isCurrent() on a ParallelReader it causes an NPE. Fix appears to be to add an isCurrent() to ParallelReader which calls it on the underlying indexes but I'm not sure what other problems may be lurking here. Do methods such as getVersion(), lastModified(), isOptimized() also have to be rewritten or is this a use case where ParallelReader will never mimic IndexReader perfectly? At the very least this behavior should be documented so others know what to expect.


    [junit] Testcase: testIsCurrent(org.apache.lucene.index.TestParallelReader):        Caused an ERROR
    [junit] null
    [junit] java.lang.NullPointerException
    [junit]     at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:502)
    [junit]     at org.apache.lucene.index.SegmentInfos.readCurrentVersion(SegmentInfos.java:336)
    [junit]     at org.apache.lucene.index.IndexReader.isCurrent(IndexReader.java:316)
    [junit]     at org.apache.lucene.index.TestParallelReader.testIsCurrent(TestParallelReader.java:146)



Index: src/test/org/apache/lucene/index/TestParallelReader.java
===================================================================
--- src/test/org/apache/lucene/index/TestParallelReader.java    (revision 518122)
+++ src/test/org/apache/lucene/index/TestParallelReader.java    (working copy)
@@ -135,6 +135,15 @@
       assertEquals(docParallel.get(""f4""), docSingle.get(""f4""));
     }
   }
+  
+  public void testIsCurrent() throws IOException {
+    Directory dir1 = getDir1();
+    Directory dir2 = getDir2();
+    ParallelReader pr = new ParallelReader();
+    pr.add(IndexReader.open(dir1));
+    pr.add(IndexReader.open(dir2));
+    assertTrue(pr.isCurrent());
+  }
 
   // Fiels 1-4 indexed together:
   private Searcher single() throws IOException {
"
1,"wrong charset indication in HttpConstants.getContentString(). Around line 236 in HttpConstants.getConstentString() the charset is wrongly indicated as 
""DEFAULT_CONTENT_CHARSET"" where it should have been indicated as ""charset"" like in the 
getContentBytes function.

            if (LOG.isWarnEnabled()) {
                LOG.warn(""Unsupported encoding: "" 
                    + DEFAULT_CONTENT_CHARSET // <== should be the variable ""charset"" here
                    + "". Default HTTP encoding used"");
            }

Wrong copy/paste I guess :-)

ZC."
1,"TestIndexWriterExceptions random failure: AIOOBE in ByteBlockPool.allocSlice. TestIndexWriterExceptions threw this today, and its reproducable"
1,"Observation events are not triggered for intermediate nodes in version storage. When a new version history is created no observation events are triggered for the intermediate nodes.

E.g. for the VersionHistory d94d4b41-f68e-4586-9e88-96e6790981d8 the following events are triggered (with a node filter applied, property events are not visible):

Node added: /jcr:system/jcr:versionStorage/d9/4d/4b/d94d4b41-f68e-4586-9e88-96e6790981d8
Node added: /jcr:system/jcr:versionStorage/d9/4d/4b/d94d4b41-f68e-4586-9e88-96e6790981d8/jcr:versionLabels
Node added: /jcr:system/jcr:versionStorage/d9/4d/4b/d94d4b41-f68e-4586-9e88-96e6790981d8/jcr:rootVersion
Node added: /jcr:system/jcr:versionStorage/d9/4d/4b/d94d4b41-f68e-4586-9e88-96e6790981d8/jcr:rootVersion/jcr:frozenNode

Observation should also trigger node added events for:
/jcr:system/jcr:versionStorage/d9
/jcr:system/jcr:versionStorage/d9/4d
/jcr:system/jcr:versionStorage/d9/4d/4b"
1,"[PATCH] GermanAnalyzer fails silently + doesn't close files. As mentioned on the developer list, the German analyzer will assume an empty list of 
stopwords if the stopword file isn't found. I'll attach a patch that makes it throw an 
IOException instead. Also the patch makes sure the file readers are closed."
1,"If index has more than Integer.MAX_VALUE terms, seeking can it AIOOBE due to long/int overflow. Tom hit a new long/int overflow case: http://markmail.org/thread/toyl2ujcl4suqvf3

This is a regression, in 3.1, introduced with LUCENE-2075.

Worse, our Test2BTerms failed to catch this, so I've fixed that test to show the failure."
1,"small float underflow detection bug. Underflow detection in small floats has a bug, and can incorrectly result in a byte value of 0 for a non-zero float."
1,"NRTCachingDir has invalid asserts (if same file name is written twice). Normally Lucene is write-once (except for segments.gen file, which NRTCachingDir never caches), but in some tests (TestDoc, TestCrash) we can write the same file more than once.

I don't think NRTCachingDir should have these asserts, and I think on createOutput it should remove any old file if present.

I also found & fixed a possible concurrency issue (if more than one thread syncs at the same time; IndexWriter doesn't ever do this today but it has in the past)."
0,"Collapse nested OR expressions. Executing a query with multiple OR expressions in a predicate leads to score values that depend on the order of the operands.

For example, the following query:

//*[jcr:contains(@prop1, 'foo') or jcr:contains(@prop2, 'foo') or jcr:contains(@prop3, 'foo')] order by @jcr:score descending

will return a slightly different result compared to:

//*[jcr:contains(@prop3, 'foo') or jcr:contains(@prop1, 'foo') or jcr:contains(@prop2, 'foo')] order by @jcr:score descending

Internally jackrabbit parses the predicate of the first query into a tree:

orExpr(orExpr(contains(prop1, 'foo'), contains(prop2, 'foo')), contains(prop3, 'foo'))

Lucene will calculate the score for the inner OR expression first and then for the outer, which is not equivalent with a nested expression that has property names in a different sequence.

The query should be translated internally into a single OR expression with three operands. That way, the score value is always the same, irrespective of the order of the operands."
0,Use the remote-resources-plugin to add LICENSE and NOTICE files to binaries. Since JCRSITE-13 the remote resources plugin is configured to automatically add LICENSE and NOTICE files to all of our binary artifacts (including -sources and -javadoc jars). We should adapt the configuration so that these files get to include all the correct licensing metadata we currently maintain in src/main/resources/META-INF.
0,[API Doc] HttpClient tutorial update. Bring the tutorial up to date with the latest best practices
0,"[PATCH] simplify conversion of strings to primitives by using parseXXX, not valueOf(xxx).xxxValue(). Code converts strings to primitives using a two step process, eg

Boolean.valueOf(myString).booleanValue();

can be simplified to 

Boolean.parseBoolean(myString);

true of Float, Double, Int etc. 

In some cases, this avoids allocating temporary boxed objects

patch fixes this."
0,"Improve ArrayUtil/CollectionUtil.*Sort() methods to early-reaturn on empty or one-element lists/arrays. It might be a good idea to make CollectionUtil or ArrayUtil return early if the passed-in list or array's length <= 1 because sorting is unneeded then. This improves maybe automaton or other places, as for empty or one-element lists no SorterTermplate is created."
0,"Remove recursion in NumericRangeTermEnum. The current FilteredTermEnum in NRQ uses setEnum() which itsself calls next(). This may lead to a recursion that can overflow stack, if the index is empty and a large range with low precStep is used. With 64 bit numbers and precStep == 1 there may be 127 recursions, as each sub-range would hit no term on empty index and the setEnum call would then call next() which itsself calls setEnum again. This leads to recursion depth of 256.

Attached is a patch that converts to iterative approach. setEnum is now unused and throws UOE (like endEnum())."
0,"Visibility of Scorer.score(Collector, int, int) is wrong. The method for scoring subsets in Scorer has wrong visibility, its marked protected, but protected methods should not be called from other classes. Protected methods are intended for methods that should be overridden by subclasses and are called by (often) final methods of the same class. They should never be called from foreign classes.

This method is called from another class out-of-scope: BooleanScorer(2) - so it must be public, but it's protected. This does not lead to a compiler error because BS(2) is in same package, but may lead to problems if subclasses from other packages override it. When implementing LUCENE-2838 I hit a trap, as I thought tis method should only be called from the class or Scorer itsself, but in fact its called from outside, leading to bugs, because I had not overridden it. As ConstantScorer did not use it I have overridden it with throw UOE and suddenly BooleanQuery was broken, which made it clear that it's called from outside (which is not the intention of protected methods).

We cannot fix this in 3.x, as it would break backwards for classes that overwrite this method, but we can fix visibility in trunk.
"
0,"Add set/getLocalAddress methods to HostConfiguration. On clustered or multi-homed systems, there's a need to specify the local bind
address of sockets, to ensure that they're created on the right interface.  To
do this, the local address needs to be passed to the 4-argument version of
ProtcolSocketFactory.createSocket.

After discussion on the mailing list, the best approach for this seems to be
adding the local address as a property on HostConfiguration and HttpConnection.  

I've attached a patch which does the following:
- Add public set/getLocalAddress methods to HostConfiguration and HttpConnection.
- HttpConnection uses the local address when opening connections.
- Modify HostConfiguration.equals and hostEquals to compare the local address too.
- SimpleHttpConnectionManager uses the local address from the provided config. 
I also cleaned up its getConnection method a bit.
- HttpClient.executeMethod uses the local address from its default
HostConfiguration if the method's config doesn't specify one."
0,"jackrabbit-webapp facelift. Still before 1.4, I meant to make the jackrabbit-webapp look a bit nicer. I'm taking the skin from JCR-1236 and applying it to jackrabbit-webapp."
0,JFlex-based HTMLStripCharFilter replacement. A JFlex-based HTMLStripCharFilter replacement would be more performant and easier to understand and maintain.
0,"BindableRepositoryFactory requires exact resource type. The org.apache.jackrabbit.jndi.BindableRepositoryFactory class requires the exact class name org.apache.jackrabbit.jndi.BindableRepository to be specified for the JNDI resource that the factory is responsible for. However the current deployment model 2 howto document suggest that the more generic interface name javax.jcr.Repository be used instead. Currently this suggested configuration results in a null JNDI resource .

This issue should be fixed by either fixing the documentation (I can do this) or by relaxing the code in BindableRepositoryFactory. I'll attach a patch that does the latter, please comment on what you think is the best solution.

This issue was detected during the mailing list thread
http://thread.gmane.org/gmane.comp.apache.jackrabbit.devel/2303"
0,"[PATCH] documentation typo. Just a small patch that fixes a typo and changes the first sentence, as that 
one is used by Javadoc as a kind of summary so it should be something more 
useful than ""The Jakarta Lucene API is divided into several packages."""
0,"More utility methods in JcrUtils. I'd like to add at least the following utility methods to JcrUtils:

For logging:

    // Utility method to simplify log messages and debug prints:
    // Node -> ""name [type]""
    // Property -> ""@name = value(s)""
    String toString(Item item)

For making sure that a node exists:

    // Returns the identified child node. If the child does not already exist,
    // it is added using the default node type from the parent.
    Node setNode(Node parent, String name)

    // Same as above, but ensures that isNodeType(type) is true for the
    // returned node, using addNode(name, type) or setPrimaryType(type)
    // if needed.
    Node setNode(Node parent, String name, String type)

For adding (or setting, see above) nt:folder nodes:

    // Adds a new nt:folder node with the given name
    Node addFolder(Node parent, String name)

    // Ensures that an nt:folder node with the given name exists
    Node setFolder(Node parent, String name)

For adding (or setting) nt:file nodes:

    // Adds a new nt:file/nt:resource structure
    // If the mime type contains a charset parameter, then the jcr:encoding property is also set
    Node addFile(Node parent, String name, String mime, InputStream data)
    Node addFile(Node parent, String name, String mime, Calendar date, InputStream data)

    // Ensures that an nt:file/nt:resource structure exists with the given data.
    // Note that the type of a potential existing jcr:content node is not modified
    Node setFile(Node parent, String name, String mime, InputStream data)
    Node setFile(Node parent, String name, String mime, Calendar date, InputStream data)
"
0,Javadoc mistake in SegmentMerger. 
0,"Create a jackrabbit-site subproject. The Jackrabbit web site sources should be moved to a new ""jackrabbit-site"" subproject so that the top-level Jackrabbit POM would only be used for the multimodule build setup and generic project metadata. This way the web site could be built more easily without invoking all the subprojects, and Eclipse would also be happier since the site project wouldn't ""contain"" the other Jackrabbit modules."
0,"add -Dtests.codecprovider. Currently to test a codec (or set of codecs) you have to add them to lucene's core and edit a couple of arrays here and there...

It would be nice if when using the test-framework you could instead specify a codecprovider by classname (possibly containing your own set of huper-duper codecs).

For example I made the following little codecprovider in contrib:
{noformat}
public class AppendingCodecProvider extends CodecProvider {
  public AppendingCodecProvider() {
    register(new AppendingCodec());
    register(new SimpleTextCodec());
  }
}
{noformat}

Then, I'm able to run tests with 'ant -lib build/contrib/misc/lucene-misc-4.0-SNAPSHOT.jar test-core -Dtests.codecprovider=org.apache.lucene.index.codecs.appending.AppendingCodecProvider', and it always picks from my set of  codecs (in this case Appending and SimpleText), and I can set -Dtests.codec=Appending if i want to set just one.

"
0,"TermOrdVal/DocValuesComparator does too much work in compareBottom. We now have logic to fall back to by-value comparison, when the bottom
slot is not from the current reader.

But this is silly, because if the bottom slot is from a different
reader, it means the tie-break case is not possible (since the current
reader didn't have the bottom value), so when the incoming ord equals
the bottom ord we should always return x > 0.

I added a new random string sort test case to TestSort...

I also renamed DocValues.SortedSource.getByValue -> getOrdByValue and
cleaned up some whitespace.
"
0,"Remove commons-collections and slf4j-api dependencies from jcr-commons. As noted in JCR-1615 and discussed on the mailing list [1] it would be good if jackrabbit-jcr-commons didn't come with extra dependencies beyond the standard Java class libraries and the JCR API.

Currently jackrabbit-jcr-commons depends on both commons-collections and slf4j-api, but both dependencies are relatively isolated and could be dropped with relatively little effort. Both dependency changes may be backwards incompatible with existing clients, but since the impact is reasonably small and easy to resolve I'd be OK doing this in 1.5.

[1] http://markmail.org/message/724ruk4l7b5rjtan"
0,JSR 283: Workspace Management. 
0,"search.function - (1) score based on field value, (2) simple score customizability. FunctionQuery can return a score based on a field's value or on it's ordinal value.

FunctionFactory subclasses define the details of the function.  There is currently a LinearFloatFunction (a line specified by slope and intercept).

Field values are typically obtained from FieldValueSourceFactory.  Implementations include FloatFieldSource, IntFieldSource, and OrdFieldSource."
